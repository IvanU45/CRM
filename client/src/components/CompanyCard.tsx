// components/CompanyCard.tsx (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import React, { useState } from 'react';
import { Company, Vehicle, Tariff } from '../api/companies';
import { VehicleForm } from './VehicleForm';
import { TariffForm } from './TariffForm';
import { CompanyForm } from './CompanyForm';
import { DeleteConfirmModal } from './DeleteConfirmModal';
import { companiesAPI } from '../api/companies';

interface CompanyCardProps {
  company: Company;
  enumData: any;
  onUpdate: () => void;
}

export const CompanyCard: React.FC<CompanyCardProps> = ({ company, enumData, onUpdate }) => {
  const [expanded, setExpanded] = useState(false);
  const [showVehicleForm, setShowVehicleForm] = useState(false);
  const [showTariffForm, setShowTariffForm] = useState(false);
  const [showEditCompany, setShowEditCompany] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [deleteLoading, setDeleteLoading] = useState(false);

  const handleDeleteCompany = async () => {
    setDeleteLoading(true);
    try {
      await companiesAPI.deleteCompany(company.id);
      onUpdate();
      setShowDeleteConfirm(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', error);
    } finally {
      setDeleteLoading(false);
    }
  };

  const getAreaLabel = (area: string) => {
    const areaMap: { [key: string]: string } = {
      STAVROPOLSKIY_KRAY: '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π',
      ROSTOVSKAYA_OBLAST: '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      KRASNODARSKIY_KRAY: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π'
    };
    return areaMap[area] || area;
  };

  return (
    <>
      <div className="card hover:shadow-xl transition-shadow duration-300">
        <div className="flex justify-between items-start mb-4">
          <div className="flex-1">
            <h3 className="text-xl font-semibold text-white mb-2">{company.name}</h3>
            <p className="text-gray-400 text-sm mb-2">{company.description}</p>
            <div className="flex items-center text-sm text-gray-500 mb-1">
              <span>üìç {getAreaLabel(company.area)}</span>
            </div>
            <div className="text-sm text-gray-500 mb-1">üìû {company.phone}</div>
            <div className="text-sm text-gray-500 mb-1">üìß {company.email}</div>
            {company.website && (
              <div className="text-sm text-gray-500 mb-1">üåê {company.website}</div>
            )}
          </div>
          
          <div className="flex space-x-2">
            <button
              onClick={() => setShowEditCompany(true)}
              className="btn-secondary text-sm px-3 py-1"
              title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
            >
              ‚úèÔ∏è
            </button>
            <button
              onClick={() => setShowDeleteConfirm(true)}
              className="btn-danger text-sm px-3 py-1"
              title="–£–¥–∞–ª–∏—Ç—å"
            >
              üóëÔ∏è
            </button>
            <button
              onClick={() => setExpanded(!expanded)}
              className="btn-secondary text-sm px-3 py-1"
              title={expanded ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
            >
              {expanded ? '‚ñ≤' : '‚ñº'}
            </button>
          </div>
        </div>

        {expanded && (
          <div className="space-y-4">
            {/* Vehicles Section */}
            <div>
              <div className="flex justify-between items-center mb-3">
                <h4 className="text-lg font-medium text-white">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞</h4>
                <button
                  onClick={() => setShowVehicleForm(true)}
                  className="btn-primary text-sm px-3 py-1"
                >
                  + –î–æ–±–∞–≤–∏—Ç—å
                </button>
              </div>
              {company.vehicles.length > 0 ? (
                <div className="grid gap-2">
                  {company.vehicles.map((vehicle) => (
                    <VehicleItem key={vehicle.id} vehicle={vehicle} onUpdate={onUpdate} enumData={enumData} />
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 text-sm">–ù–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤</p>
              )}
            </div>

            {/* Tariffs Section */}
            <div>
              <div className="flex justify-between items-center mb-3">
                <h4 className="text-lg font-medium text-white">–¢–∞—Ä–∏—Ñ—ã</h4>
                <button
                  onClick={() => setShowTariffForm(true)}
                  className="btn-primary text-sm px-3 py-1"
                >
                  + –î–æ–±–∞–≤–∏—Ç—å
                </button>
              </div>
              {company.tariffs.length > 0 ? (
                <div className="grid gap-2">
                  {company.tariffs.map((tariff) => (
                    <TariffItem key={tariff.id} tariff={tariff} onUpdate={onUpdate} enumData={enumData} />
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 text-sm">–ù–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤</p>
              )}
            </div>
          </div>
        )}
      </div>

      {showEditCompany && (
        <CompanyForm
          company={company}
          enumData={enumData}
          onClose={() => setShowEditCompany(false)}
          onSuccess={onUpdate}
        />
      )}

      {showVehicleForm && (
        <VehicleForm
          companyId={company.id}
          enumData={enumData}
          onClose={() => setShowVehicleForm(false)}
          onSuccess={onUpdate}
        />
      )}

      {showTariffForm && (
        <TariffForm
          companyId={company.id}
          enumData={enumData}
          onClose={() => setShowTariffForm(false)}
          onSuccess={onUpdate}
        />
      )}

      <DeleteConfirmModal
        isOpen={showDeleteConfirm}
        onClose={() => setShowDeleteConfirm(false)}
        onConfirm={handleDeleteCompany}
        title="–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
        message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–ø–∞–Ω–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        loading={deleteLoading}
      />
    </>
  );
};

const VehicleItem: React.FC<{ vehicle: Vehicle; onUpdate: () => void; enumData: any }> = ({ 
  vehicle, 
  onUpdate, 
  enumData 
}) => {
  const [showEdit, setShowEdit] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [deleteLoading, setDeleteLoading] = useState(false);

  const handleDelete = async () => {
    setDeleteLoading(true);
    try {
      await companiesAPI.deleteVehicle(vehicle.id);
      onUpdate();
      setShowDeleteConfirm(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', error);
    } finally {
      setDeleteLoading(false);
    }
  };

  return (
    <>
      <div className="bg-gray-700 rounded-lg p-3 flex justify-between items-center">
        <div className="flex-1">
          <div className="text-white font-medium">{vehicle.licensePlate}</div>
          <div className="text-gray-400 text-sm">{vehicle.model}</div>
          <div className="text-gray-500 text-xs">
            {vehicle.vehicleType} ‚Ä¢ {vehicle.capacity}—Ç ‚Ä¢ {vehicle.volume}–º¬≥ ‚Ä¢ {vehicle.vehicleStatus}
          </div>
        </div>
        <div className="flex space-x-2">
          <button
            onClick={() => setShowEdit(true)}
            className="btn-secondary text-sm px-2 py-1"
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          >
            ‚úèÔ∏è
          </button>
          <button
            onClick={() => setShowDeleteConfirm(true)}
            className="btn-danger text-sm px-2 py-1"
            title="–£–¥–∞–ª–∏—Ç—å"
          >
            üóëÔ∏è
          </button>
        </div>
      </div>

      {showEdit && (
        <VehicleForm
          vehicle={vehicle}
          enumData={enumData}
          onClose={() => setShowEdit(false)}
          onSuccess={onUpdate}
        />
      )}

      <DeleteConfirmModal
        isOpen={showDeleteConfirm}
        onClose={() => setShowDeleteConfirm(false)}
        onConfirm={handleDelete}
        title="–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"
        message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ?"
        loading={deleteLoading}
      />
    </>
  );
};

const TariffItem: React.FC<{ tariff: Tariff; onUpdate: () => void; enumData: any }> = ({ 
  tariff, 
  onUpdate, 
  enumData 
}) => {
  const [showEdit, setShowEdit] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [deleteLoading, setDeleteLoading] = useState(false);

  const handleDelete = async () => {
    setDeleteLoading(true);
    try {
      await companiesAPI.deleteTariff(tariff.id);
      onUpdate();
      setShowDeleteConfirm(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:', error);
    } finally {
      setDeleteLoading(false);
    }
  };

  return (
    <>
      <div className="bg-gray-700 rounded-lg p-3 flex justify-between items-center">
        <div className="flex-1">
          <div className="text-white font-medium">{tariff.name}</div>
          <div className="text-gray-400 text-sm">
            {tariff.rate} {tariff.rateType}
          </div>
          <div className="text-gray-500 text-xs">
            –ú–∏–Ω. —Ü–µ–Ω–∞: {tariff.minPrice} —Ä—É–±.
          </div>
        </div>
        <div className="flex space-x-2">
          <button
            onClick={() => setShowEdit(true)}
            className="btn-secondary text-sm px-2 py-1"
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          >
            ‚úèÔ∏è
          </button>
          <button
            onClick={() => setShowDeleteConfirm(true)}
            className="btn-danger text-sm px-2 py-1"
            title="–£–¥–∞–ª–∏—Ç—å"
          >
            üóëÔ∏è
          </button>
        </div>
      </div>

      {showEdit && (
        <TariffForm
          tariff={tariff}
          enumData={enumData}
          onClose={() => setShowEdit(false)}
          onSuccess={onUpdate}
        />
      )}

      <DeleteConfirmModal
        isOpen={showDeleteConfirm}
        onClose={() => setShowDeleteConfirm(false)}
        onConfirm={handleDelete}
        title="–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞"
        message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ?"
        loading={deleteLoading}
      />
    </>
  );
};